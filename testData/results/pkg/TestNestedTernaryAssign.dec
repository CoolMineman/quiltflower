package pkg;

public class TestNestedTernaryAssign {
   public void test(boolean b1, boolean b2, boolean b3) {
      if (b1) {// 5
         if (b2) {
            String var10000 = "3";
         } else {
            3;
         }
      } else if (b3) {
         String var5 = "4";
      } else {
         4;
      }

   }// 6

   public void test2(boolean b1, boolean b2, boolean b3) {
      if (b1) {// 9
         String var10000 = b2 ? "3" : "33";
      } else {
         String var5 = b3 ? "4" : "44";
      }

   }// 10

   public void test3(boolean b1, boolean b2, int a, int b) {
      int c = b1 ? (a > (b2 ? 3 : b) ? a : b) : b;// 13
      System.out.println(c);// 15
   }// 16

   public void test4(boolean b1, int a, int b) {
      byte var10000;
      label17: {
         label16: {
            if (b1) {// 19
               if (a > b) {
                  break label16;
               }
            } else if (a < b) {
               break label16;
            }

            var10000 = 16;
            break label17;
         }

         var10000 = 0;
      }

      accept(var10000);
   }// 20

   public void test5(boolean b1, boolean b2, int a, int b) {
      byte var10000;
      label31: {
         label30: {
            if (b1) {// 23
               if (a > b) {
                  break label30;
               }
            } else if (a < b) {
               break label30;
            }

            var10000 = 16;
            break label31;
         }

         var10000 = 0;
      }

      byte var10001;
      label23: {
         label22: {
            if (b2) {
               if (a > b) {
                  break label22;
               }
            } else if (a < b) {
               break label22;
            }

            var10001 = 16;
            break label23;
         }

         var10001 = 0;
      }

      accept(var10000, var10001);
   }// 24

   private static void accept(int i) {
   }// 28

   private static void accept(int i, int j) {
   }// 32
}

class 'pkg/TestNestedTernaryAssign' {
   method 'test (ZZZ)V' {
      0      4
      1      4
      4      5
      5      5
      8      6
      9      6
      d      8
      e      8
      f      8
      10      8
      14      10
      15      10
      18      11
      19      11
      1d      13
      1e      13
      23      16
   }

   method 'test2 (ZZZ)V' {
      0      19
      1      19
      4      20
      5      20
      8      20
      9      20
      d      20
      e      20
      12      22
      13      22
      16      22
      17      22
      1b      22
      1f      25
   }

   method 'test3 (ZZII)V' {
      0      28
      1      28
      4      28
      5      28
      6      28
      9      28
      d      28
      f      28
      12      28
      16      28
      17      28
      1b      28
      1d      28
      1e      28
      1f      29
      20      29
      21      29
      22      29
      23      29
      24      29
      25      29
      26      29
      27      30
   }

   method 'test4 (ZII)V' {
      0      36
      1      36
      4      37
      5      37
      6      37
      c      40
      d      40
      e      40
      11      48
      15      44
      17      51
      18      51
      19      51
      1a      52
   }

   method 'test5 (ZZII)V' {
      0      58
      1      58
      4      59
      5      59
      6      59
      7      59
      d      62
      e      62
      f      62
      10      62
      13      70
      17      66
      19      76
      1a      76
      1d      77
      1e      77
      1f      77
      20      77
      26      80
      27      80
      28      80
      29      80
      2c      88
      30      84
      32      91
      33      91
      34      91
      35      92
   }

   method 'accept (I)V' {
      0      95
   }

   method 'accept (II)V' {
      0      98
   }
}

Lines mapping:
5 <-> 5
6 <-> 17
9 <-> 20
10 <-> 26
13 <-> 29
15 <-> 30
16 <-> 31
19 <-> 37
20 <-> 53
23 <-> 59
24 <-> 93
28 <-> 96
32 <-> 99
